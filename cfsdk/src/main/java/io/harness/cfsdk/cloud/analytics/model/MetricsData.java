/*
 * Harness feature flag analytics service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.harness.cfsdk.cloud.analytics.model;

import java.util.Objects;
import java.util.Arrays;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MetricsData
 */
public class MetricsData {
    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    private Long timestamp;

    public static final String SERIALIZED_NAME_COUNT = "count";
    @SerializedName(SERIALIZED_NAME_COUNT)
    private Integer count;

    /**
     * This can be of type FeatureMetrics
     */
    @JsonAdapter(MetricsTypeEnum.Adapter.class)
    public enum MetricsTypeEnum {
        FFMETRICS("FFMETRICS");

        private String value;

        MetricsTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static MetricsTypeEnum fromValue(String value) {
            for (MetricsTypeEnum b : MetricsTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<MetricsTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MetricsTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MetricsTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return MetricsTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_METRICS_TYPE = "metricsType";
    @SerializedName(SERIALIZED_NAME_METRICS_TYPE)
    private MetricsTypeEnum metricsType;

    public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
    private List<KeyValue> attributes = new ArrayList<>();


    public MetricsData timestamp(Long timestamp) {

        this.timestamp = timestamp;
        return this;
    }

    /**
     * time at when this data was recorded
     *
     * @return timestamp
     **/
    @ApiModelProperty(example = "1608175465", required = true, value = "time at when this data was recorded")

    public Long getTimestamp() {
        return timestamp;
    }


    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }


    public MetricsData count(Integer count) {

        this.count = count;
        return this;
    }

    /**
     * Get count
     *
     * @return count
     **/
    @ApiModelProperty(required = true, value = "")

    public Integer getCount() {
        return count;
    }


    public void setCount(Integer count) {
        this.count = count;
    }


    public MetricsData metricsType(MetricsTypeEnum metricsType) {

        this.metricsType = metricsType;
        return this;
    }

    /**
     * This can be of type FeatureMetrics
     *
     * @return metricsType
     **/
    @ApiModelProperty(required = true, value = "This can be of type FeatureMetrics")

    public MetricsTypeEnum getMetricsType() {
        return metricsType;
    }


    public void setMetricsType(MetricsTypeEnum metricsType) {
        this.metricsType = metricsType;
    }


    public MetricsData attributes(List<KeyValue> attributes) {

        this.attributes = attributes;
        return this;
    }

    public MetricsData addAttributesItem(KeyValue attributesItem) {
        this.attributes.add(attributesItem);
        return this;
    }

    /**
     * Get attributes
     *
     * @return attributes
     **/
    @ApiModelProperty(required = true, value = "")

    public List<KeyValue> getAttributes() {
        return attributes;
    }


    public void setAttributes(List<KeyValue> attributes) {
        this.attributes = attributes;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetricsData metricsData = (MetricsData) o;
        return Objects.equals(this.timestamp, metricsData.timestamp) &&
                Objects.equals(this.count, metricsData.count) &&
                Objects.equals(this.metricsType, metricsData.metricsType) &&
                Objects.equals(this.attributes, metricsData.attributes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(timestamp, count, metricsType, attributes);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MetricsData {\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    metricsType: ").append(toIndentedString(metricsType)).append("\n");
        sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
